# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
#      with:
#        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
#    - name: Install Terraform
#      uses: hashicorp/setup-terraform@v1.3.7
#      with:
#        terraform_version: 1.1.4


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
#    - name: Terraform Format
#      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
#      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'<<<<<<< HEAD
      run: terraform apply -auto-approve

    - name: Copy key.pem to local machine
      run:
 #       mkdir -p ./terraform_ci-cd/key
#        cp ${{ runner.workspace }}/key.pem /home/
         ls -al ${{ runner.workspace }}

#    - name: Copy key.pem
#      uses: actions/upload-artifact@v2
#      with:
#        name: key
#        path: ./key.pem

#    - name: Download key.pem
#      uses: actions/download-artifact@v2
#      with:
#        name: key
#        path: .

#    - name: Move key.pem
#      run: mv key.pem /home/ubuntu/terraform_ci-cd/


#    - name: Copy key.pem to local machine
#      run: scp -r -i ./terraform_ci-cd/key/key.pem ubuntu@3.236.133.214:/tmp

#    - name: Upload SSH Key
#      uses: actions/upload-artifact@v2
#      with:
#        name: ssh-key
#        path: ./terraform_ci-cd/key/key.pem

#    - name: Install AWS CLI
#      run: |
#         sudo apt-get update
#         sudo apt-get install -y python3-pip
#         pip3 install awscli



#    - name: Download key file from S3
#      env:
#        AWS_ACCESS_KEY_ID: AKIARLZMBU6VA3D6AVJZ
#        AWS_SECRET_ACCESS_KEY: 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
#        AWS_DEFAULT_REGION: us-east-1
#      run: |
#          mkdir -p ./terraform_ci-cd/key
#          ls -al ./terraform_ci-cd/key/
#          pwd
#          aws s3 cp s3://qwerty12345asdfg/key.pem ./terraform_ci-cd/
#          ls -al ./terraform_ci-cd/key/
#    - name: Copy key.pem to local machine
#      uses: actions/upload-artifact@v2
#      with:
#        name: key.pem
#        path: /home/runner/work/terraform_ci-cd/terraform_ci-cd/key/key.pem

#   - name: Download Key
 #     env:
#        AWS_ACCESS_KEY_ID: AKIARLZMBU6VA3D6AVJZ
#        AWS_SECRET_ACCESS_KEY: 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
#        AWS_DEFAULT_REGION: us-east-1
#      run: |
#        sudo mkdir -p ./terraform_ci-cd/key
#        sudo chmod 777 ./terraform_ci-cd/key
#        ls -al ./terraform_ci-cd
#        pwd
#        cp -r /home/runner/work/terraform_ci-cd/terraform_ci-cd/key/* ./terraform_ci-cd/
#      shell: bash
#        sudo aws s3 cp s3://qwerty12345asdfg/key.pem ./terraform_ci-cd/
#        sudo cp -r ./terraform_ci-cd/key/ /home/

